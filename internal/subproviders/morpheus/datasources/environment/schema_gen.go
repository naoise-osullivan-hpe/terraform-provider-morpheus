// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package environment

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func EnvironmentDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the environment is active",
				MarkdownDescription: "Whether the environment is active",
			},
			"code": schema.StringAttribute{
				Computed:            true,
				Description:         "Optional code for use with policies",
				MarkdownDescription: "Optional code for use with policies",
			},
			"description": schema.StringAttribute{
				Computed:            true,
				Description:         "The description of the Morpheus environment",
				MarkdownDescription: "The description of the Morpheus environment",
			},
			"id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Morpheus ID of the Object being referenced",
				MarkdownDescription: "Morpheus ID of the Object being referenced",
				Validators: []validator.Int64{
					int64validator.ConflictsWith(path.Expressions{
						path.MatchRoot("name"),
					}...),
				},
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the Morpheus environment",
				MarkdownDescription: "The name of the Morpheus environment",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("id"),
					}...),
				},
			},
			"visibility": schema.StringAttribute{
				Computed:            true,
				Description:         "Whether the environment is visible in sub-tenants or not",
				MarkdownDescription: "Whether the environment is visible in sub-tenants or not",
			},
		},
	}
}

type EnvironmentModel struct {
	Active      types.Bool   `tfsdk:"active"`
	Code        types.String `tfsdk:"code"`
	Description types.String `tfsdk:"description"`
	Id          types.Int64  `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	Visibility  types.String `tfsdk:"visibility"`
}
